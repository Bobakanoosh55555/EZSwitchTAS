
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000018a2  00800100  00000c3a  00000cce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  008019a2  008019a2  00002570  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002584  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004beb  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001686  00000000  00000000  000073df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a91  00000000  00000000  00008a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000664  00000000  00000000  0000b4f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001faf  00000000  00000000  0000bb5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d31  00000000  00000000  0000db0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0001083c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
   2:	00 00       	nop
   4:	bf c0       	rjmp	.+382    	; 0x184 <__bad_interrupt>
   6:	00 00       	nop
   8:	bd c0       	rjmp	.+378    	; 0x184 <__bad_interrupt>
   a:	00 00       	nop
   c:	bb c0       	rjmp	.+374    	; 0x184 <__bad_interrupt>
   e:	00 00       	nop
  10:	b9 c0       	rjmp	.+370    	; 0x184 <__bad_interrupt>
  12:	00 00       	nop
  14:	b7 c0       	rjmp	.+366    	; 0x184 <__bad_interrupt>
  16:	00 00       	nop
  18:	b5 c0       	rjmp	.+362    	; 0x184 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b3 c0       	rjmp	.+358    	; 0x184 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b1 c0       	rjmp	.+354    	; 0x184 <__bad_interrupt>
  22:	00 00       	nop
  24:	af c0       	rjmp	.+350    	; 0x184 <__bad_interrupt>
  26:	00 00       	nop
  28:	ad c0       	rjmp	.+346    	; 0x184 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	bd c3       	rjmp	.+1914   	; 0x7a8 <__vector_11>
  2e:	00 00       	nop
  30:	a9 c0       	rjmp	.+338    	; 0x184 <__bad_interrupt>
  32:	00 00       	nop
  34:	a7 c0       	rjmp	.+334    	; 0x184 <__bad_interrupt>
  36:	00 00       	nop
  38:	a5 c0       	rjmp	.+330    	; 0x184 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a3 c0       	rjmp	.+326    	; 0x184 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a1 c0       	rjmp	.+322    	; 0x184 <__bad_interrupt>
  42:	00 00       	nop
  44:	9f c0       	rjmp	.+318    	; 0x184 <__bad_interrupt>
  46:	00 00       	nop
  48:	9d c0       	rjmp	.+314    	; 0x184 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9b c0       	rjmp	.+310    	; 0x184 <__bad_interrupt>
  4e:	00 00       	nop
  50:	99 c0       	rjmp	.+306    	; 0x184 <__bad_interrupt>
  52:	00 00       	nop
  54:	97 c0       	rjmp	.+302    	; 0x184 <__bad_interrupt>
  56:	00 00       	nop
  58:	95 c0       	rjmp	.+298    	; 0x184 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	93 c0       	rjmp	.+294    	; 0x184 <__bad_interrupt>
  5e:	00 00       	nop
  60:	91 c0       	rjmp	.+290    	; 0x184 <__bad_interrupt>
  62:	00 00       	nop
  64:	8f c0       	rjmp	.+286    	; 0x184 <__bad_interrupt>
  66:	00 00       	nop
  68:	8d c0       	rjmp	.+282    	; 0x184 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8b c0       	rjmp	.+278    	; 0x184 <__bad_interrupt>
  6e:	00 00       	nop
  70:	89 c0       	rjmp	.+274    	; 0x184 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	24 03 50 00 4f 00 4b 00 4b 00 45 00 4e 00 20 00     $.P.O.K.K.E.N. .
  84:	43 00 4f 00 4e 00 54 00 52 00 4f 00 4c 00 4c 00     C.O.N.T.R.O.L.L.
  94:	45 00 52 00 00 00                                   E.R...

0000009a <ManufacturerString>:
  9a:	1c 03 48 00 4f 00 52 00 49 00 20 00 43 00 4f 00     ..H.O.R.I. .C.O.
  aa:	2e 00 2c 00 4c 00 54 00 44 00 2e 00 00 00           ..,.L.T.D.....

000000b8 <LanguageString>:
  b8:	04 03 09 04                                         ....

000000bc <ConfigurationDescriptor>:
  bc:	09 02 29 00 01 01 00 80 fa 09 04 00 00 02 03 00     ..).............
  cc:	00 00 09 21 11 01 00 01 22 56 00 07 05 02 03 40     ...!...."V.....@
  dc:	00 05 07 05 81 03 40 00 05                          ......@..

000000e5 <DeviceDescriptor>:
  e5:	12 01 00 02 00 00 00 40 0d 0f 92 00 00 01 01 02     .......@........
  f5:	00 01                                               ..

000000f7 <JoystickReport>:
  f7:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
 107:	95 10 05 09 19 01 29 10 81 02 05 01 25 07 46 3b     ......).....%.F;
 117:	01 75 04 95 01 65 14 09 39 81 42 65 00 95 01 81     .u...e..9.Be....
 127:	01 26 ff 00 46 ff 00 09 30 09 31 09 32 09 35 75     .&..F...0.1.2.5u
 137:	08 95 04 81 02 06 00 ff 09 20 95 01 81 02 0a 21     ......... .....!
 147:	26 95 08 91 02 c0 00                                &......

0000014e <__ctors_end>:
 14e:	11 24       	eor	r1, r1
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf ef       	ldi	r28, 0xFF	; 255
 154:	d2 e0       	ldi	r29, 0x02	; 2
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
 15a:	19 e1       	ldi	r17, 0x19	; 25
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	ea e3       	ldi	r30, 0x3A	; 58
 162:	fc e0       	ldi	r31, 0x0C	; 12
 164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
 166:	05 90       	lpm	r0, Z+
 168:	0d 92       	st	X+, r0
 16a:	a2 3a       	cpi	r26, 0xA2	; 162
 16c:	b1 07       	cpc	r27, r17
 16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
 170:	29 e1       	ldi	r18, 0x19	; 25
 172:	a2 ea       	ldi	r26, 0xA2	; 162
 174:	b9 e1       	ldi	r27, 0x19	; 25
 176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
 178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
 17a:	a5 3c       	cpi	r26, 0xC5	; 197
 17c:	b2 07       	cpc	r27, r18
 17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
 180:	af d0       	rcall	.+350    	; 0x2e0 <main>
 182:	59 c5       	rjmp	.+2738   	; 0xc36 <_exit>

00000184 <__bad_interrupt>:
 184:	3d cf       	rjmp	.-390    	; 0x0 <__vectors>

00000186 <SetupHardware>:
}

// Configures hardware and peripherals, such as the USB peripherals.
void SetupHardware(void) {
	// We need to disable watchdog if enabled by bootloader/fuses.
	MCUSR &= ~(1 << WDRF);
 186:	84 b7       	in	r24, 0x34	; 52
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	a8 95       	wdr
 192:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 196:	88 61       	ori	r24, 0x18	; 24
 198:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 19c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 1a0:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 1ae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
                  //We'll just flash all pins on both ports since the UNO R3
	DDRB  = 0xFF; //uses PORTB. Micro can use either or, but both give us 2 LEDs
	PORTB =  0x0; //The ATmega328P on the UNO will be resetting, so unplug it?
	#endif
	// The USB stack should be initialized last.
	USB_Init();
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	ea c2       	rjmp	.+1492   	; 0x78a <USB_Init>

000001b6 <EVENT_USB_Device_Connect>:
 1b6:	08 95       	ret

000001b8 <EVENT_USB_Device_Disconnect>:
 1b8:	08 95       	ret

000001ba <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 1ba:	42 e3       	ldi	r20, 0x32	; 50
 1bc:	60 ec       	ldi	r22, 0xC0	; 192
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	24 d2       	rcall	.+1096   	; 0x60a <Endpoint_ConfigureEndpoint_Prv>
 1c2:	42 e3       	ldi	r20, 0x32	; 50
 1c4:	61 ec       	ldi	r22, 0xC1	; 193
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	20 c2       	rjmp	.+1088   	; 0x60a <Endpoint_ConfigureEndpoint_Prv>

000001ca <EVENT_USB_Device_ControlRequest>:

	// We can read ConfigSuccess to indicate a success or failure at this point.
}

// Process control requests sent to the device from the USB host.
void EVENT_USB_Device_ControlRequest(void) {
 1ca:	08 95       	ret

000001cc <GetNextReport>:
int xpos = 0;
int ypos = 0;
int portsval = 0;

// Prepare the next report for the host.
void GetNextReport(USB_JoystickReport_Input_t* const ReportData,int counter) {
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24

	// Prepare an empty report
	memset(ReportData, 0, sizeof(USB_JoystickReport_Input_t));
 1d2:	98 e0       	ldi	r25, 0x08	; 8
 1d4:	fe 01       	movw	r30, r28
 1d6:	89 2f       	mov	r24, r25
 1d8:	11 92       	st	Z+, r1
 1da:	8a 95       	dec	r24
 1dc:	e9 f7       	brne	.-6      	; 0x1d8 <GetNextReport+0xc>
	ReportData->LX = STICK_CENTER;
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	8b 83       	std	Y+3, r24	; 0x03
	ReportData->LY = STICK_CENTER;
 1e2:	8c 83       	std	Y+4, r24	; 0x04
	ReportData->RX = STICK_CENTER;
 1e4:	8d 83       	std	Y+5, r24	; 0x05
	ReportData->RY = STICK_CENTER;
 1e6:	8e 83       	std	Y+6, r24	; 0x06
	ReportData->HAT = HAT_CENTER;
 1e8:	9a 83       	std	Y+2, r25	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	ef ef       	ldi	r30, 0xFF	; 255
 1ec:	f9 ef       	ldi	r31, 0xF9	; 249
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <GetNextReport+0x22>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <GetNextReport+0x28>
 1f4:	00 00       	nop
	//	ReportData->Button = SWITCH_A;
	//}
	// TAS.h regular inputs
	//else
	//{
	memcpy(ReportData,&Inputs[counter],sizeof(USB_JoystickReport_Input_t));
 1f6:	fb 01       	movw	r30, r22
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	8a 95       	dec	r24
 200:	e1 f7       	brne	.-8      	; 0x1fa <GetNextReport+0x2e>
 202:	ef 5f       	subi	r30, 0xFF	; 255
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	88 e0       	ldi	r24, 0x08	; 8
 208:	de 01       	movw	r26, r28
 20a:	01 90       	ld	r0, Z+
 20c:	0d 92       	st	X+, r0
 20e:	8a 95       	dec	r24
 210:	e1 f7       	brne	.-8      	; 0x20a <GetNextReport+0x3e>
	//}

	counter++;
	
	// Stops integer overflow for report count
	report_count = (report_count + 1) % 100;
 212:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <report_count>
 216:	90 91 a9 19 	lds	r25, 0x19A9	; 0x8019a9 <report_count+0x1>
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	64 e6       	ldi	r22, 0x64	; 100
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	e3 d4       	rcall	.+2502   	; 0xbe8 <__divmodhi4>
 222:	90 93 a9 19 	sts	0x19A9, r25	; 0x8019a9 <report_count+0x1>
 226:	80 93 a8 19 	sts	0x19A8, r24	; 0x8019a8 <report_count>

	// Prepare to echo this report
	memcpy(&last_report, ReportData, sizeof(USB_JoystickReport_Input_t));
 22a:	88 e0       	ldi	r24, 0x08	; 8
 22c:	fe 01       	movw	r30, r28
 22e:	a0 eb       	ldi	r26, 0xB0	; 176
 230:	b9 e1       	ldi	r27, 0x19	; 25
 232:	01 90       	ld	r0, Z+
 234:	0d 92       	st	X+, r0
 236:	8a 95       	dec	r24
 238:	e1 f7       	brne	.-8      	; 0x232 <GetNextReport+0x66>
	echoes = ECHOES;
 23a:	10 92 ab 19 	sts	0x19AB, r1	; 0x8019ab <echoes+0x1>
 23e:	10 92 aa 19 	sts	0x19AA, r1	; 0x8019aa <echoes>

}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <HID_Task>:

	// Not used here, it looks like we don't receive control request from the Switch.
}

// Process and deliver data from IN and OUT endpoints.
void HID_Task(void) {
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	28 97       	sbiw	r28, 0x08	; 8
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
	// If the device isn't connected and properly configured, we can't do anything here.
	if (USB_DeviceState != DEVICE_STATE_Configured)
 25c:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <USB_DeviceState>
 260:	84 30       	cpi	r24, 0x04	; 4
 262:	a9 f5       	brne	.+106    	; 0x2ce <HID_Task+0x86>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 26a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		return;

	// We'll start with the OUT endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_OUT_EPADDR);
	// We'll check to see if we received something on the OUT endpoint.
	if (Endpoint_IsOUTReceived())
 26e:	82 ff       	sbrs	r24, 2
 270:	12 c0       	rjmp	.+36     	; 0x296 <HID_Task+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 272:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		// If we did, and the packet has data, we'll react to it.
		if (Endpoint_IsReadWriteAllowed())
 276:	85 ff       	sbrs	r24, 5
 278:	09 c0       	rjmp	.+18     	; 0x28c <HID_Task+0x44>
		{
			// We'll create a place to store our data received from the host.
			USB_JoystickReport_Output_t JoystickOutputData;
			// We'll then take in that data, setting it up in our storage.
			while(Endpoint_Read_Stream_LE(&JoystickOutputData, sizeof(JoystickOutputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	67 e0       	ldi	r22, 0x07	; 7
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	ce 01       	movw	r24, r28
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	bc d0       	rcall	.+376    	; 0x400 <Endpoint_Read_Stream_LE>
 288:	81 11       	cpse	r24, r1
 28a:	f7 cf       	rjmp	.-18     	; 0x27a <HID_Task+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 28c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 290:	8b 77       	andi	r24, 0x7B	; 123
 292:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 29c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	}

	// We'll then move on to the IN endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_IN_EPADDR);
	// We first check to see if the host is ready to accept data.
	if (Endpoint_IsINReady())
 2a0:	80 ff       	sbrs	r24, 0
 2a2:	15 c0       	rjmp	.+42     	; 0x2ce <HID_Task+0x86>
	{
		// We'll create an empty report.
		USB_JoystickReport_Input_t JoystickInputData;
		// We'll then populate this report with what we want to send to the host.
		GetNextReport(&JoystickInputData,counter);
 2a4:	60 91 ac 19 	lds	r22, 0x19AC	; 0x8019ac <counter>
 2a8:	70 91 ad 19 	lds	r23, 0x19AD	; 0x8019ad <counter+0x1>
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	8d df       	rcall	.-230    	; 0x1cc <GetNextReport>
		// Once populated, we can output this data to the host. We do this by first writing the data to the control stream.
		while(Endpoint_Write_Stream_LE(&JoystickInputData, sizeof(JoystickInputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	68 e0       	ldi	r22, 0x08	; 8
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	ce 01       	movw	r24, r28
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	56 d0       	rcall	.+172    	; 0x36c <Endpoint_Write_Stream_LE>
 2c0:	81 11       	cpse	r24, r1
 2c2:	f7 cf       	rjmp	.-18     	; 0x2b2 <HID_Task+0x6a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 2c8:	8e 77       	andi	r24, 0x7E	; 126
 2ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		// We then send an IN packet on this endpoint.
		Endpoint_ClearIN();
	}
}
 2ce:	28 96       	adiw	r28, 0x08	; 8
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <main>:
uint32_t counter = 0;

extern const uint8_t image_data[0x12c1] PROGMEM;

// Main entry point.
int main(void) {
 2e0:	52 df       	rcall	.-348    	; 0x186 <SetupHardware>
 2e2:	78 94       	sei
 2e4:	b1 df       	rcall	.-158    	; 0x248 <HID_Task>
 2e6:	66 d4       	rcall	.+2252   	; 0xbb4 <USB_USBTask>
 2e8:	fd cf       	rjmp	.-6      	; 0x2e4 <main+0x4>

000002ea <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2ea:	29 2f       	mov	r18, r25
 2ec:	33 27       	eor	r19, r19
 2ee:	23 30       	cpi	r18, 0x03	; 3
 2f0:	31 05       	cpc	r19, r1
 2f2:	e1 f0       	breq	.+56     	; 0x32c <__stack+0x2d>
 2f4:	58 f4       	brcc	.+22     	; 0x30c <__stack+0xd>
 2f6:	21 30       	cpi	r18, 0x01	; 1
 2f8:	31 05       	cpc	r19, r1
 2fa:	99 f0       	breq	.+38     	; 0x322 <__stack+0x23>
 2fc:	22 30       	cpi	r18, 0x02	; 2
 2fe:	31 05       	cpc	r19, r1
 300:	69 f5       	brne	.+90     	; 0x35c <__stack+0x5d>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 302:	89 e2       	ldi	r24, 0x29	; 41
 304:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 306:	2c eb       	ldi	r18, 0xBC	; 188
 308:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 30a:	2c c0       	rjmp	.+88     	; 0x364 <__stack+0x65>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 30c:	21 32       	cpi	r18, 0x21	; 33
 30e:	31 05       	cpc	r19, r1
 310:	01 f1       	breq	.+64     	; 0x352 <__stack+0x53>
 312:	22 32       	cpi	r18, 0x22	; 34
 314:	31 05       	cpc	r19, r1
 316:	11 f5       	brne	.+68     	; 0x35c <__stack+0x5d>
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
 318:	86 e5       	ldi	r24, 0x56	; 86
 31a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
 31c:	27 ef       	ldi	r18, 0xF7	; 247
 31e:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(JoystickReport);
			break;
 320:	21 c0       	rjmp	.+66     	; 0x364 <__stack+0x65>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 322:	82 e1       	ldi	r24, 0x12	; 18
 324:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 326:	25 ee       	ldi	r18, 0xE5	; 229
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	1c c0       	rjmp	.+56     	; 0x364 <__stack+0x65>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 32c:	99 27       	eor	r25, r25
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	91 05       	cpc	r25, r1
 332:	49 f0       	breq	.+18     	; 0x346 <__stack+0x47>
 334:	28 f0       	brcs	.+10     	; 0x340 <__stack+0x41>
 336:	02 97       	sbiw	r24, 0x02	; 2
 338:	89 f4       	brne	.+34     	; 0x35c <__stack+0x5d>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 33a:	e4 e7       	ldi	r30, 0x74	; 116
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	05 c0       	rjmp	.+10     	; 0x34a <__stack+0x4b>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 340:	e8 eb       	ldi	r30, 0xB8	; 184
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <__stack+0x4b>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 346:	ea e9       	ldi	r30, 0x9A	; 154
 348:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 34a:	84 91       	lpm	r24, Z
 34c:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 34e:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 350:	09 c0       	rjmp	.+18     	; 0x364 <__stack+0x65>
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 352:	89 e0       	ldi	r24, 0x09	; 9
 354:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
 356:	2e ec       	ldi	r18, 0xCE	; 206
 358:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 35a:	04 c0       	rjmp	.+8      	; 0x364 <__stack+0x65>
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
	const void** const DescriptorAddress
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
 364:	fa 01       	movw	r30, r20
 366:	31 83       	std	Z+1, r19	; 0x01
 368:	20 83       	st	Z, r18
	return Size;
}
 36a:	08 95       	ret

0000036c <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 36c:	cf 92       	push	r12
 36e:	df 92       	push	r13
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	ec 01       	movw	r28, r24
 37e:	8b 01       	movw	r16, r22
 380:	7a 01       	movw	r14, r20
 382:	97 d1       	rcall	.+814    	; 0x6b2 <Endpoint_WaitUntilReady>
 384:	81 11       	cpse	r24, r1
 386:	33 c0       	rjmp	.+102    	; 0x3ee <Endpoint_Write_Stream_LE+0x82>
 388:	e1 14       	cp	r14, r1
 38a:	f1 04       	cpc	r15, r1
 38c:	39 f0       	breq	.+14     	; 0x39c <Endpoint_Write_Stream_LE+0x30>
 38e:	f7 01       	movw	r30, r14
 390:	80 81       	ld	r24, Z
 392:	91 81       	ldd	r25, Z+1	; 0x01
 394:	08 1b       	sub	r16, r24
 396:	19 0b       	sbc	r17, r25
 398:	c8 0f       	add	r28, r24
 39a:	d9 1f       	adc	r29, r25
 39c:	c1 2c       	mov	r12, r1
 39e:	d1 2c       	mov	r13, r1
 3a0:	01 15       	cp	r16, r1
 3a2:	11 05       	cpc	r17, r1
 3a4:	19 f1       	breq	.+70     	; 0x3ec <Endpoint_Write_Stream_LE+0x80>
 3a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3aa:	85 fd       	sbrc	r24, 5
 3ac:	16 c0       	rjmp	.+44     	; 0x3da <Endpoint_Write_Stream_LE+0x6e>
 3ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3b2:	8e 77       	andi	r24, 0x7E	; 126
 3b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3b8:	fd d3       	rcall	.+2042   	; 0xbb4 <USB_USBTask>
 3ba:	e1 14       	cp	r14, r1
 3bc:	f1 04       	cpc	r15, r1
 3be:	49 f0       	breq	.+18     	; 0x3d2 <Endpoint_Write_Stream_LE+0x66>
 3c0:	f7 01       	movw	r30, r14
 3c2:	80 81       	ld	r24, Z
 3c4:	91 81       	ldd	r25, Z+1	; 0x01
 3c6:	c8 0e       	add	r12, r24
 3c8:	d9 1e       	adc	r13, r25
 3ca:	d1 82       	std	Z+1, r13	; 0x01
 3cc:	c0 82       	st	Z, r12
 3ce:	85 e0       	ldi	r24, 0x05	; 5
 3d0:	0e c0       	rjmp	.+28     	; 0x3ee <Endpoint_Write_Stream_LE+0x82>
 3d2:	6f d1       	rcall	.+734    	; 0x6b2 <Endpoint_WaitUntilReady>
 3d4:	88 23       	and	r24, r24
 3d6:	21 f3       	breq	.-56     	; 0x3a0 <Endpoint_Write_Stream_LE+0x34>
 3d8:	0a c0       	rjmp	.+20     	; 0x3ee <Endpoint_Write_Stream_LE+0x82>
 3da:	89 91       	ld	r24, Y+
 3dc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 3e0:	01 50       	subi	r16, 0x01	; 1
 3e2:	11 09       	sbc	r17, r1
 3e4:	ff ef       	ldi	r31, 0xFF	; 255
 3e6:	cf 1a       	sub	r12, r31
 3e8:	df 0a       	sbc	r13, r31
 3ea:	da cf       	rjmp	.-76     	; 0x3a0 <Endpoint_Write_Stream_LE+0x34>
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	ff 90       	pop	r15
 3f8:	ef 90       	pop	r14
 3fa:	df 90       	pop	r13
 3fc:	cf 90       	pop	r12
 3fe:	08 95       	ret

00000400 <Endpoint_Read_Stream_LE>:
 400:	cf 92       	push	r12
 402:	df 92       	push	r13
 404:	ef 92       	push	r14
 406:	ff 92       	push	r15
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	ec 01       	movw	r28, r24
 412:	8b 01       	movw	r16, r22
 414:	7a 01       	movw	r14, r20
 416:	4d d1       	rcall	.+666    	; 0x6b2 <Endpoint_WaitUntilReady>
 418:	81 11       	cpse	r24, r1
 41a:	33 c0       	rjmp	.+102    	; 0x482 <Endpoint_Read_Stream_LE+0x82>
 41c:	e1 14       	cp	r14, r1
 41e:	f1 04       	cpc	r15, r1
 420:	39 f0       	breq	.+14     	; 0x430 <Endpoint_Read_Stream_LE+0x30>
 422:	f7 01       	movw	r30, r14
 424:	80 81       	ld	r24, Z
 426:	91 81       	ldd	r25, Z+1	; 0x01
 428:	08 1b       	sub	r16, r24
 42a:	19 0b       	sbc	r17, r25
 42c:	c8 0f       	add	r28, r24
 42e:	d9 1f       	adc	r29, r25
 430:	c1 2c       	mov	r12, r1
 432:	d1 2c       	mov	r13, r1
 434:	01 15       	cp	r16, r1
 436:	11 05       	cpc	r17, r1
 438:	19 f1       	breq	.+70     	; 0x480 <Endpoint_Read_Stream_LE+0x80>
 43a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 43e:	85 fd       	sbrc	r24, 5
 440:	16 c0       	rjmp	.+44     	; 0x46e <Endpoint_Read_Stream_LE+0x6e>
 442:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 446:	8b 77       	andi	r24, 0x7B	; 123
 448:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 44c:	b3 d3       	rcall	.+1894   	; 0xbb4 <USB_USBTask>
 44e:	e1 14       	cp	r14, r1
 450:	f1 04       	cpc	r15, r1
 452:	49 f0       	breq	.+18     	; 0x466 <Endpoint_Read_Stream_LE+0x66>
 454:	f7 01       	movw	r30, r14
 456:	80 81       	ld	r24, Z
 458:	91 81       	ldd	r25, Z+1	; 0x01
 45a:	c8 0e       	add	r12, r24
 45c:	d9 1e       	adc	r13, r25
 45e:	d1 82       	std	Z+1, r13	; 0x01
 460:	c0 82       	st	Z, r12
 462:	85 e0       	ldi	r24, 0x05	; 5
 464:	0e c0       	rjmp	.+28     	; 0x482 <Endpoint_Read_Stream_LE+0x82>
 466:	25 d1       	rcall	.+586    	; 0x6b2 <Endpoint_WaitUntilReady>
 468:	88 23       	and	r24, r24
 46a:	21 f3       	breq	.-56     	; 0x434 <Endpoint_Read_Stream_LE+0x34>
 46c:	0a c0       	rjmp	.+20     	; 0x482 <Endpoint_Read_Stream_LE+0x82>
 46e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 472:	89 93       	st	Y+, r24
 474:	01 50       	subi	r16, 0x01	; 1
 476:	11 09       	sbc	r17, r1
 478:	ff ef       	ldi	r31, 0xFF	; 255
 47a:	cf 1a       	sub	r12, r31
 47c:	df 0a       	sbc	r13, r31
 47e:	da cf       	rjmp	.-76     	; 0x434 <Endpoint_Read_Stream_LE+0x34>
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	ff 90       	pop	r15
 48c:	ef 90       	pop	r14
 48e:	df 90       	pop	r13
 490:	cf 90       	pop	r12
 492:	08 95       	ret

00000494 <Endpoint_Write_Control_Stream_LE>:
 494:	20 91 c3 19 	lds	r18, 0x19C3	; 0x8019c3 <USB_ControlRequest+0x6>
 498:	30 91 c4 19 	lds	r19, 0x19C4	; 0x8019c4 <USB_ControlRequest+0x7>
 49c:	26 17       	cp	r18, r22
 49e:	37 07       	cpc	r19, r23
 4a0:	48 f0       	brcs	.+18     	; 0x4b4 <Endpoint_Write_Control_Stream_LE+0x20>
 4a2:	61 15       	cp	r22, r1
 4a4:	71 05       	cpc	r23, r1
 4a6:	39 f4       	brne	.+14     	; 0x4b6 <Endpoint_Write_Control_Stream_LE+0x22>
 4a8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4ac:	2e 77       	andi	r18, 0x7E	; 126
 4ae:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <Endpoint_Write_Control_Stream_LE+0x22>
 4b4:	b9 01       	movw	r22, r18
 4b6:	fc 01       	movw	r30, r24
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	61 15       	cp	r22, r1
 4bc:	71 05       	cpc	r23, r1
 4be:	69 f1       	breq	.+90     	; 0x51a <Endpoint_Write_Control_Stream_LE+0x86>
 4c0:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <USB_DeviceState>
 4c4:	88 23       	and	r24, r24
 4c6:	e1 f1       	breq	.+120    	; 0x540 <Endpoint_Write_Control_Stream_LE+0xac>
 4c8:	85 30       	cpi	r24, 0x05	; 5
 4ca:	e1 f1       	breq	.+120    	; 0x544 <Endpoint_Write_Control_Stream_LE+0xb0>
 4cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4d0:	83 fd       	sbrc	r24, 3
 4d2:	3a c0       	rjmp	.+116    	; 0x548 <Endpoint_Write_Control_Stream_LE+0xb4>
 4d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4d8:	82 fd       	sbrc	r24, 2
 4da:	2c c0       	rjmp	.+88     	; 0x534 <Endpoint_Write_Control_Stream_LE+0xa0>
 4dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4e0:	80 ff       	sbrs	r24, 0
 4e2:	eb cf       	rjmp	.-42     	; 0x4ba <Endpoint_Write_Control_Stream_LE+0x26>
 4e4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	61 15       	cp	r22, r1
 4ec:	71 05       	cpc	r23, r1
 4ee:	51 f0       	breq	.+20     	; 0x504 <Endpoint_Write_Control_Stream_LE+0x70>
 4f0:	80 34       	cpi	r24, 0x40	; 64
 4f2:	91 05       	cpc	r25, r1
 4f4:	38 f4       	brcc	.+14     	; 0x504 <Endpoint_Write_Control_Stream_LE+0x70>
 4f6:	21 91       	ld	r18, Z+
 4f8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 4fc:	61 50       	subi	r22, 0x01	; 1
 4fe:	71 09       	sbc	r23, r1
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	f3 cf       	rjmp	.-26     	; 0x4ea <Endpoint_Write_Control_Stream_LE+0x56>
 504:	21 e0       	ldi	r18, 0x01	; 1
 506:	80 34       	cpi	r24, 0x40	; 64
 508:	91 05       	cpc	r25, r1
 50a:	09 f0       	breq	.+2      	; 0x50e <Endpoint_Write_Control_Stream_LE+0x7a>
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 512:	8e 77       	andi	r24, 0x7E	; 126
 514:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 518:	d0 cf       	rjmp	.-96     	; 0x4ba <Endpoint_Write_Control_Stream_LE+0x26>
 51a:	21 11       	cpse	r18, r1
 51c:	d1 cf       	rjmp	.-94     	; 0x4c0 <Endpoint_Write_Control_Stream_LE+0x2c>
 51e:	0a c0       	rjmp	.+20     	; 0x534 <Endpoint_Write_Control_Stream_LE+0xa0>
 520:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <USB_DeviceState>
 524:	88 23       	and	r24, r24
 526:	61 f0       	breq	.+24     	; 0x540 <Endpoint_Write_Control_Stream_LE+0xac>
 528:	85 30       	cpi	r24, 0x05	; 5
 52a:	61 f0       	breq	.+24     	; 0x544 <Endpoint_Write_Control_Stream_LE+0xb0>
 52c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 530:	83 fd       	sbrc	r24, 3
 532:	0a c0       	rjmp	.+20     	; 0x548 <Endpoint_Write_Control_Stream_LE+0xb4>
 534:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 538:	82 ff       	sbrs	r24, 2
 53a:	f2 cf       	rjmp	.-28     	; 0x520 <Endpoint_Write_Control_Stream_LE+0x8c>
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	08 95       	ret
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	08 95       	ret
 544:	83 e0       	ldi	r24, 0x03	; 3
 546:	08 95       	ret
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	08 95       	ret

0000054c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 54c:	20 91 c3 19 	lds	r18, 0x19C3	; 0x8019c3 <USB_ControlRequest+0x6>
 550:	30 91 c4 19 	lds	r19, 0x19C4	; 0x8019c4 <USB_ControlRequest+0x7>
 554:	26 17       	cp	r18, r22
 556:	37 07       	cpc	r19, r23
 558:	48 f0       	brcs	.+18     	; 0x56c <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 55a:	61 15       	cp	r22, r1
 55c:	71 05       	cpc	r23, r1
 55e:	39 f4       	brne	.+14     	; 0x56e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 560:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 564:	2e 77       	andi	r18, 0x7E	; 126
 566:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 56a:	01 c0       	rjmp	.+2      	; 0x56e <Endpoint_Write_Control_PStream_LE+0x22>
 56c:	b9 01       	movw	r22, r18
 56e:	fc 01       	movw	r30, r24
 570:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 572:	61 15       	cp	r22, r1
 574:	71 05       	cpc	r23, r1
 576:	81 f1       	breq	.+96     	; 0x5d8 <Endpoint_Write_Control_PStream_LE+0x8c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 578:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 57c:	88 23       	and	r24, r24
 57e:	09 f4       	brne	.+2      	; 0x582 <Endpoint_Write_Control_PStream_LE+0x36>
 580:	3e c0       	rjmp	.+124    	; 0x5fe <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 582:	85 30       	cpi	r24, 0x05	; 5
 584:	09 f4       	brne	.+2      	; 0x588 <Endpoint_Write_Control_PStream_LE+0x3c>
 586:	3d c0       	rjmp	.+122    	; 0x602 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 588:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 58c:	83 fd       	sbrc	r24, 3
 58e:	3b c0       	rjmp	.+118    	; 0x606 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 590:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 594:	82 fd       	sbrc	r24, 2
 596:	2d c0       	rjmp	.+90     	; 0x5f2 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 598:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  break;

		if (Endpoint_IsINReady())
 59c:	80 ff       	sbrs	r24, 0
 59e:	e9 cf       	rjmp	.-46     	; 0x572 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 5a0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 5a4:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 5a6:	61 15       	cp	r22, r1
 5a8:	71 05       	cpc	r23, r1
 5aa:	59 f0       	breq	.+22     	; 0x5c2 <Endpoint_Write_Control_PStream_LE+0x76>
 5ac:	80 34       	cpi	r24, 0x40	; 64
 5ae:	91 05       	cpc	r25, r1
 5b0:	40 f4       	brcc	.+16     	; 0x5c2 <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 5b2:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 5b4:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 5b8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 5ba:	61 50       	subi	r22, 0x01	; 1
 5bc:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 5be:	01 96       	adiw	r24, 0x01	; 1
 5c0:	f2 cf       	rjmp	.-28     	; 0x5a6 <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 5c2:	21 e0       	ldi	r18, 0x01	; 1
 5c4:	80 34       	cpi	r24, 0x40	; 64
 5c6:	91 05       	cpc	r25, r1
 5c8:	09 f0       	breq	.+2      	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x80>
 5ca:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 5d0:	8e 77       	andi	r24, 0x7E	; 126
 5d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 5d6:	cd cf       	rjmp	.-102    	; 0x572 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 5d8:	21 11       	cpse	r18, r1
 5da:	ce cf       	rjmp	.-100    	; 0x578 <Endpoint_Write_Control_PStream_LE+0x2c>
 5dc:	0a c0       	rjmp	.+20     	; 0x5f2 <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5de:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5e2:	88 23       	and	r24, r24
 5e4:	61 f0       	breq	.+24     	; 0x5fe <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5e6:	85 30       	cpi	r24, 0x05	; 5
 5e8:	61 f0       	breq	.+24     	; 0x602 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 5ee:	83 fd       	sbrc	r24, 3
 5f0:	0a c0       	rjmp	.+20     	; 0x606 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 5f6:	82 ff       	sbrs	r24, 2
 5f8:	f2 cf       	rjmp	.-28     	; 0x5de <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5fe:	82 e0       	ldi	r24, 0x02	; 2
 600:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 602:	83 e0       	ldi	r24, 0x03	; 3
 604:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 606:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 608:	08 95       	ret

0000060a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 60a:	98 2f       	mov	r25, r24
 60c:	95 30       	cpi	r25, 0x05	; 5
 60e:	68 f5       	brcc	.+90     	; 0x66a <Endpoint_ConfigureEndpoint_Prv+0x60>
 610:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 614:	98 17       	cp	r25, r24
 616:	39 f0       	breq	.+14     	; 0x626 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 618:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 61c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 620:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 624:	03 c0       	rjmp	.+6      	; 0x62c <Endpoint_ConfigureEndpoint_Prv+0x22>
 626:	24 2f       	mov	r18, r20
 628:	76 2f       	mov	r23, r22
 62a:	50 e0       	ldi	r21, 0x00	; 0
 62c:	21 fd       	sbrc	r18, 1
 62e:	02 c0       	rjmp	.+4      	; 0x634 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 630:	9f 5f       	subi	r25, 0xFF	; 255
 632:	ec cf       	rjmp	.-40     	; 0x60c <Endpoint_ConfigureEndpoint_Prv+0x2>
 634:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 638:	3e 7f       	andi	r19, 0xFE	; 254
 63a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 63e:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 642:	3d 7f       	andi	r19, 0xFD	; 253
 644:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 648:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 64c:	31 60       	ori	r19, 0x01	; 1
 64e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 652:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 656:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 65a:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 65e:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
 662:	27 fd       	sbrc	r18, 7
 664:	e5 cf       	rjmp	.-54     	; 0x630 <Endpoint_ConfigureEndpoint_Prv+0x26>
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	08 95       	ret
 66a:	8f 70       	andi	r24, 0x0F	; 15
 66c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	08 95       	ret

00000674 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 674:	80 91 bd 19 	lds	r24, 0x19BD	; 0x8019bd <USB_ControlRequest>
 678:	87 ff       	sbrs	r24, 7
 67a:	11 c0       	rjmp	.+34     	; 0x69e <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 67c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 680:	82 fd       	sbrc	r24, 2
 682:	05 c0       	rjmp	.+10     	; 0x68e <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 684:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <USB_DeviceState>
 688:	81 11       	cpse	r24, r1
 68a:	f8 cf       	rjmp	.-16     	; 0x67c <Endpoint_ClearStatusStage+0x8>
 68c:	11 c0       	rjmp	.+34     	; 0x6b0 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 68e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 692:	8b 77       	andi	r24, 0x7B	; 123
 694:	0b c0       	rjmp	.+22     	; 0x6ac <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 696:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <USB_DeviceState>
 69a:	88 23       	and	r24, r24
 69c:	49 f0       	breq	.+18     	; 0x6b0 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 69e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 6a2:	80 ff       	sbrs	r24, 0
 6a4:	f8 cf       	rjmp	.-16     	; 0x696 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 6aa:	8e 77       	andi	r24, 0x7E	; 126
 6ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 6b0:	08 95       	ret

000006b2 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 6b2:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 6b6:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
 6ba:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 6bc:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 6c0:	84 2f       	mov	r24, r20
 6c2:	81 70       	andi	r24, 0x01	; 1
 6c4:	40 ff       	sbrs	r20, 0
 6c6:	23 c0       	rjmp	.+70     	; 0x70e <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 6c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 6cc:	80 fd       	sbrc	r24, 0
 6ce:	1d c0       	rjmp	.+58     	; 0x70a <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6d0:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6d4:	88 23       	and	r24, r24
 6d6:	99 f0       	breq	.+38     	; 0x6fe <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6d8:	85 30       	cpi	r24, 0x05	; 5
 6da:	99 f0       	breq	.+38     	; 0x702 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 6dc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 6e0:	85 fd       	sbrc	r24, 5
 6e2:	11 c0       	rjmp	.+34     	; 0x706 <Endpoint_WaitUntilReady+0x54>
 6e4:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 6e8:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 6ec:	24 17       	cp	r18, r20
 6ee:	35 07       	cpc	r19, r21
 6f0:	29 f3       	breq	.-54     	; 0x6bc <Endpoint_WaitUntilReady+0xa>
 6f2:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 6f4:	11 f0       	breq	.+4      	; 0x6fa <Endpoint_WaitUntilReady+0x48>
 6f6:	9a 01       	movw	r18, r20
 6f8:	e1 cf       	rjmp	.-62     	; 0x6bc <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 6fa:	84 e0       	ldi	r24, 0x04	; 4
 6fc:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 6fe:	82 e0       	ldi	r24, 0x02	; 2
 700:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 702:	83 e0       	ldi	r24, 0x03	; 3
 704:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 70e:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 712:	42 ff       	sbrs	r20, 2
 714:	dd cf       	rjmp	.-70     	; 0x6d0 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 716:	08 95       	ret

00000718 <USB_ResetInterface>:
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
 718:	41 d0       	rcall	.+130    	; 0x79c <USB_INT_DisableAllInterrupts>
 71a:	43 d0       	rcall	.+134    	; 0x7a2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 71c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 720:	8f 77       	andi	r24, 0x7F	; 127
 722:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
 726:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 72a:	80 68       	ori	r24, 0x80	; 128
 72c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 730:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 734:	8f 7d       	andi	r24, 0xDF	; 223
 736:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 73a:	84 e0       	ldi	r24, 0x04	; 4
 73c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 73e:	86 e0       	ldi	r24, 0x06	; 6
 740:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 742:	09 b4       	in	r0, 0x29	; 41
 744:	00 fe       	sbrs	r0, 0
 746:	fd cf       	rjmp	.-6      	; 0x742 <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 748:	10 92 bc 19 	sts	0x19BC, r1	; 0x8019bc <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
 74c:	10 92 b8 19 	sts	0x19B8, r1	; 0x8019b8 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 750:	10 92 ba 19 	sts	0x19BA, r1	; 0x8019ba <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 754:	10 92 b9 19 	sts	0x19B9, r1	; 0x8019b9 <USB_Device_CurrentlySelfPowered>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 758:	42 e3       	ldi	r20, 0x32	; 50
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	55 df       	rcall	.-342    	; 0x60a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 760:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 764:	8e 7f       	andi	r24, 0xFE	; 254
 766:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 76a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 76e:	81 60       	ori	r24, 0x01	; 1
 770:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 774:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 778:	88 60       	ori	r24, 0x08	; 8
 77a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 77e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 782:	8e 7f       	andi	r24, 0xFE	; 254
 784:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 788:	08 95       	ret

0000078a <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 78a:	e3 e6       	ldi	r30, 0x63	; 99
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	80 81       	ld	r24, Z
 790:	8e 7f       	andi	r24, 0xFE	; 254
 792:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	80 93 bb 19 	sts	0x19BB, r24	; 0x8019bb <USB_IsInitialized>
 79a:	be cf       	rjmp	.-132    	; 0x718 <USB_ResetInterface>

0000079c <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 79c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7a0:	08 95       	ret

000007a2 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 7a2:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 7a6:	08 95       	ret

000007a8 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 7a8:	1f 92       	push	r1
 7aa:	0f 92       	push	r0
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	0f 92       	push	r0
 7b0:	11 24       	eor	r1, r1
 7b2:	2f 93       	push	r18
 7b4:	3f 93       	push	r19
 7b6:	4f 93       	push	r20
 7b8:	5f 93       	push	r21
 7ba:	6f 93       	push	r22
 7bc:	7f 93       	push	r23
 7be:	8f 93       	push	r24
 7c0:	9f 93       	push	r25
 7c2:	af 93       	push	r26
 7c4:	bf 93       	push	r27
 7c6:	ef 93       	push	r30
 7c8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 7ca:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 7ce:	82 ff       	sbrs	r24, 2
 7d0:	0a c0       	rjmp	.+20     	; 0x7e6 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 7d2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7d6:	82 ff       	sbrs	r24, 2
 7d8:	06 c0       	rjmp	.+12     	; 0x7e6 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 7da:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 7de:	8b 7f       	andi	r24, 0xFB	; 251
 7e0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 7e4:	e6 d1       	rcall	.+972    	; 0xbb2 <USB_Event_Stub>
 7e6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 7ea:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 7ec:	17 c0       	rjmp	.+46     	; 0x81c <__vector_11+0x74>
 7ee:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7f2:	80 ff       	sbrs	r24, 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7f4:	13 c0       	rjmp	.+38     	; 0x81c <__vector_11+0x74>
 7f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7fa:	8e 7f       	andi	r24, 0xFE	; 254
 7fc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 800:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 804:	80 61       	ori	r24, 0x10	; 16
 806:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 80a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 80e:	80 62       	ori	r24, 0x20	; 32
 810:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 814:	19 bc       	out	0x29, r1	; 41
		EVENT_USB_Device_Disconnect();
 816:	10 92 bc 19 	sts	0x19BC, r1	; 0x8019bc <USB_DeviceState>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 81a:	ce dc       	rcall	.-1636   	; 0x1b8 <EVENT_USB_Device_Disconnect>
 81c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 820:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 822:	2f c0       	rjmp	.+94     	; 0x882 <__vector_11+0xda>
 824:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 828:	84 ff       	sbrs	r24, 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 82a:	2b c0       	rjmp	.+86     	; 0x882 <__vector_11+0xda>
 82c:	84 e0       	ldi	r24, 0x04	; 4
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 82e:	89 bd       	out	0x29, r24	; 41
 830:	86 e0       	ldi	r24, 0x06	; 6
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 832:	89 bd       	out	0x29, r24	; 41
 834:	09 b4       	in	r0, 0x29	; 41
 836:	00 fe       	sbrs	r0, 0
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 838:	fd cf       	rjmp	.-6      	; 0x834 <__vector_11+0x8c>
 83a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 83e:	8f 7d       	andi	r24, 0xDF	; 223
 840:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 844:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 848:	8f 7e       	andi	r24, 0xEF	; 239
 84a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 84e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 852:	8f 7e       	andi	r24, 0xEF	; 239
 854:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 858:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 85c:	81 60       	ori	r24, 0x01	; 1
 85e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 862:	80 91 b8 19 	lds	r24, 0x19B8	; 0x8019b8 <USB_Device_ConfigurationNumber>
 866:	88 23       	and	r24, r24
		  USB_DeviceState = DEVICE_STATE_Configured;
 868:	11 f0       	breq	.+4      	; 0x86e <__vector_11+0xc6>
 86a:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 86c:	07 c0       	rjmp	.+14     	; 0x87c <__vector_11+0xd4>
 86e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 872:	87 fd       	sbrc	r24, 7
 874:	02 c0       	rjmp	.+4      	; 0x87a <__vector_11+0xd2>
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	01 c0       	rjmp	.+2      	; 0x87c <__vector_11+0xd4>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 87a:	83 e0       	ldi	r24, 0x03	; 3
 87c:	80 93 bc 19 	sts	0x19BC, r24	; 0x8019bc <USB_DeviceState>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 880:	9a dc       	rcall	.-1740   	; 0x1b6 <EVENT_USB_Device_Connect>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 882:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 886:	83 ff       	sbrs	r24, 3
 888:	22 c0       	rjmp	.+68     	; 0x8ce <__vector_11+0x126>
 88a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 88e:	83 ff       	sbrs	r24, 3
 890:	1e c0       	rjmp	.+60     	; 0x8ce <__vector_11+0x126>
 892:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 896:	87 7f       	andi	r24, 0xF7	; 247
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 898:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 89c:	82 e0       	ldi	r24, 0x02	; 2
		USB_Device_ConfigurationNumber = 0;
 89e:	80 93 bc 19 	sts	0x19BC, r24	; 0x8019bc <USB_DeviceState>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 8a2:	10 92 b8 19 	sts	0x19B8, r1	; 0x8019b8 <USB_Device_ConfigurationNumber>
 8a6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 8aa:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8ac:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 8b0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8b4:	8e 7f       	andi	r24, 0xFE	; 254
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8b6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8ba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 8be:	80 61       	ori	r24, 0x10	; 16
 8c0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 8c4:	42 e3       	ldi	r20, 0x32	; 50
 8c6:	60 e0       	ldi	r22, 0x00	; 0
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	9f de       	rcall	.-706    	; 0x60a <Endpoint_ConfigureEndpoint_Prv>
 8cc:	72 d1       	rcall	.+740    	; 0xbb2 <USB_Event_Stub>
 8ce:	ff 91       	pop	r31
 8d0:	ef 91       	pop	r30
 8d2:	bf 91       	pop	r27
 8d4:	af 91       	pop	r26
 8d6:	9f 91       	pop	r25
 8d8:	8f 91       	pop	r24
 8da:	7f 91       	pop	r23
 8dc:	6f 91       	pop	r22
 8de:	5f 91       	pop	r21
 8e0:	4f 91       	pop	r20
 8e2:	3f 91       	pop	r19
 8e4:	2f 91       	pop	r18
 8e6:	0f 90       	pop	r0
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	0f 90       	pop	r0
 8ec:	1f 90       	pop	r1
 8ee:	18 95       	reti

000008f0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8f0:	1f 93       	push	r17
 8f2:	cf 93       	push	r28
 8f4:	df 93       	push	r29
 8f6:	cd b7       	in	r28, 0x3d	; 61
 8f8:	de b7       	in	r29, 0x3e	; 62
 8fa:	aa 97       	sbiw	r28, 0x2a	; 42
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	f8 94       	cli
 900:	de bf       	out	0x3e, r29	; 62
 902:	0f be       	out	0x3f, r0	; 63
 904:	cd bf       	out	0x3d, r28	; 61
 906:	ed eb       	ldi	r30, 0xBD	; 189
 908:	f9 e1       	ldi	r31, 0x19	; 25
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 90a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 90e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 910:	29 e1       	ldi	r18, 0x19	; 25
 912:	e5 3c       	cpi	r30, 0xC5	; 197
 914:	f2 07       	cpc	r31, r18
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 916:	c9 f7       	brne	.-14     	; 0x90a <USB_Device_ProcessControlRequest+0x1a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 918:	58 dc       	rcall	.-1872   	; 0x1ca <EVENT_USB_Device_ControlRequest>
 91a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
 91e:	83 ff       	sbrs	r24, 3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 920:	30 c1       	rjmp	.+608    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 922:	80 91 bd 19 	lds	r24, 0x19BD	; 0x8019bd <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 926:	90 91 be 19 	lds	r25, 0x19BE	; 0x8019be <USB_ControlRequest+0x1>
 92a:	95 30       	cpi	r25, 0x05	; 5
 92c:	09 f4       	brne	.+2      	; 0x930 <USB_Device_ProcessControlRequest+0x40>
 92e:	83 c0       	rjmp	.+262    	; 0xa36 <USB_Device_ProcessControlRequest+0x146>
 930:	30 f4       	brcc	.+12     	; 0x93e <USB_Device_ProcessControlRequest+0x4e>
 932:	91 30       	cpi	r25, 0x01	; 1
 934:	a9 f1       	breq	.+106    	; 0x9a0 <USB_Device_ProcessControlRequest+0xb0>
 936:	68 f0       	brcs	.+26     	; 0x952 <USB_Device_ProcessControlRequest+0x62>
 938:	93 30       	cpi	r25, 0x03	; 3
 93a:	91 f1       	breq	.+100    	; 0x9a0 <USB_Device_ProcessControlRequest+0xb0>
 93c:	22 c1       	rjmp	.+580    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 93e:	98 30       	cpi	r25, 0x08	; 8
 940:	09 f4       	brne	.+2      	; 0x944 <USB_Device_ProcessControlRequest+0x54>
 942:	ef c0       	rjmp	.+478    	; 0xb22 <USB_Device_ProcessControlRequest+0x232>
 944:	99 30       	cpi	r25, 0x09	; 9
 946:	09 f4       	brne	.+2      	; 0x94a <USB_Device_ProcessControlRequest+0x5a>
 948:	fb c0       	rjmp	.+502    	; 0xb40 <USB_Device_ProcessControlRequest+0x250>
 94a:	96 30       	cpi	r25, 0x06	; 6
 94c:	09 f0       	breq	.+2      	; 0x950 <USB_Device_ProcessControlRequest+0x60>
 94e:	19 c1       	rjmp	.+562    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 950:	94 c0       	rjmp	.+296    	; 0xa7a <USB_Device_ProcessControlRequest+0x18a>
 952:	80 38       	cpi	r24, 0x80	; 128
 954:	21 f0       	breq	.+8      	; 0x95e <USB_Device_ProcessControlRequest+0x6e>
 956:	82 38       	cpi	r24, 0x82	; 130
 958:	09 f0       	breq	.+2      	; 0x95c <USB_Device_ProcessControlRequest+0x6c>
 95a:	13 c1       	rjmp	.+550    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 95c:	08 c0       	rjmp	.+16     	; 0x96e <USB_Device_ProcessControlRequest+0x7e>
 95e:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 962:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <USB_Device_RemoteWakeupEnabled>
 966:	99 23       	and	r25, r25
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 968:	89 f0       	breq	.+34     	; 0x98c <USB_Device_ProcessControlRequest+0x9c>
 96a:	82 60       	ori	r24, 0x02	; 2
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 96c:	0f c0       	rjmp	.+30     	; 0x98c <USB_Device_ProcessControlRequest+0x9c>
 96e:	80 91 c1 19 	lds	r24, 0x19C1	; 0x8019c1 <USB_ControlRequest+0x4>

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 972:	8f 70       	andi	r24, 0x0F	; 15
 974:	85 30       	cpi	r24, 0x05	; 5
 976:	08 f0       	brcs	.+2      	; 0x97a <USB_Device_ProcessControlRequest+0x8a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 978:	04 c1       	rjmp	.+520    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 97a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 97e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
 982:	85 fb       	bst	r24, 5
 984:	88 27       	eor	r24, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 986:	80 f9       	bld	r24, 0
 988:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 98c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 990:	97 7f       	andi	r25, 0xF7	; 247
 992:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 996:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
 99a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 99e:	cc c0       	rjmp	.+408    	; 0xb38 <USB_Device_ProcessControlRequest+0x248>
 9a0:	28 2f       	mov	r18, r24
 9a2:	2d 7f       	andi	r18, 0xFD	; 253
 9a4:	09 f0       	breq	.+2      	; 0x9a8 <USB_Device_ProcessControlRequest+0xb8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 9a6:	ed c0       	rjmp	.+474    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 9a8:	88 23       	and	r24, r24
 9aa:	19 f0       	breq	.+6      	; 0x9b2 <USB_Device_ProcessControlRequest+0xc2>
 9ac:	82 30       	cpi	r24, 0x02	; 2
 9ae:	61 f0       	breq	.+24     	; 0x9c8 <USB_Device_ProcessControlRequest+0xd8>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 9b0:	e8 c0       	rjmp	.+464    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 9b2:	80 91 bf 19 	lds	r24, 0x19BF	; 0x8019bf <USB_ControlRequest+0x2>
 9b6:	81 30       	cpi	r24, 0x01	; 1
 9b8:	09 f0       	breq	.+2      	; 0x9bc <USB_Device_ProcessControlRequest+0xcc>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 9ba:	e3 c0       	rjmp	.+454    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 9bc:	93 30       	cpi	r25, 0x03	; 3
 9be:	09 f0       	breq	.+2      	; 0x9c2 <USB_Device_ProcessControlRequest+0xd2>
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	80 93 ba 19 	sts	0x19BA, r24	; 0x8019ba <USB_Device_RemoteWakeupEnabled>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 9c6:	2e c0       	rjmp	.+92     	; 0xa24 <USB_Device_ProcessControlRequest+0x134>
 9c8:	80 91 bf 19 	lds	r24, 0x19BF	; 0x8019bf <USB_ControlRequest+0x2>
 9cc:	81 11       	cpse	r24, r1
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9ce:	2a c0       	rjmp	.+84     	; 0xa24 <USB_Device_ProcessControlRequest+0x134>
 9d0:	80 91 c1 19 	lds	r24, 0x19C1	; 0x8019c1 <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 9d4:	8f 70       	andi	r24, 0x0F	; 15
 9d6:	2f ef       	ldi	r18, 0xFF	; 255
 9d8:	28 0f       	add	r18, r24
 9da:	24 30       	cpi	r18, 0x04	; 4
 9dc:	08 f0       	brcs	.+2      	; 0x9e0 <USB_Device_ProcessControlRequest+0xf0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9de:	d1 c0       	rjmp	.+418    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 9e0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 9e4:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 9e8:	20 ff       	sbrs	r18, 0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 9ea:	1c c0       	rjmp	.+56     	; 0xa24 <USB_Device_ProcessControlRequest+0x134>
 9ec:	93 30       	cpi	r25, 0x03	; 3
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9ee:	21 f4       	brne	.+8      	; 0x9f8 <USB_Device_ProcessControlRequest+0x108>
 9f0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 9f4:	80 62       	ori	r24, 0x20	; 32
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 9f6:	14 c0       	rjmp	.+40     	; 0xa20 <USB_Device_ProcessControlRequest+0x130>
 9f8:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 9fc:	90 61       	ori	r25, 0x10	; 16
 9fe:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 a02:	21 e0       	ldi	r18, 0x01	; 1
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	a9 01       	movw	r20, r18
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <USB_Device_ProcessControlRequest+0x11e>
 a0a:	44 0f       	add	r20, r20
 a0c:	55 1f       	adc	r21, r21
 a0e:	8a 95       	dec	r24
 a10:	e2 f7       	brpl	.-8      	; 0xa0a <USB_Device_ProcessControlRequest+0x11a>
 a12:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
 a16:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a1a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 a1e:	88 60       	ori	r24, 0x08	; 8
 a20:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a24:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a2c:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a2e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a32:	20 de       	rcall	.-960    	; 0x674 <Endpoint_ClearStatusStage>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a34:	a6 c0       	rjmp	.+332    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 a36:	81 11       	cpse	r24, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a38:	a4 c0       	rjmp	.+328    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 a3a:	10 91 bf 19 	lds	r17, 0x19BF	; 0x8019bf <USB_ControlRequest+0x2>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 a3e:	1f 77       	andi	r17, 0x7F	; 127
 a40:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 a44:	80 78       	andi	r24, 0x80	; 128
 a46:	81 2b       	or	r24, r17
 a48:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 a4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a50:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a52:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a56:	0e de       	rcall	.-996    	; 0x674 <Endpoint_ClearStatusStage>
 a58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	while (!(Endpoint_IsINReady()));
 a5c:	80 ff       	sbrs	r24, 0
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 a5e:	fc cf       	rjmp	.-8      	; 0xa58 <USB_Device_ProcessControlRequest+0x168>
 a60:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 a64:	80 68       	ori	r24, 0x80	; 128
 a66:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a6a:	11 11       	cpse	r17, r1
 a6c:	02 c0       	rjmp	.+4      	; 0xa72 <USB_Device_ProcessControlRequest+0x182>
 a6e:	82 e0       	ldi	r24, 0x02	; 2
 a70:	01 c0       	rjmp	.+2      	; 0xa74 <USB_Device_ProcessControlRequest+0x184>
 a72:	83 e0       	ldi	r24, 0x03	; 3
 a74:	80 93 bc 19 	sts	0x19BC, r24	; 0x8019bc <USB_DeviceState>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a78:	84 c0       	rjmp	.+264    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 a7a:	80 58       	subi	r24, 0x80	; 128
 a7c:	82 30       	cpi	r24, 0x02	; 2
 a7e:	08 f0       	brcs	.+2      	; 0xa82 <USB_Device_ProcessControlRequest+0x192>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a80:	80 c0       	rjmp	.+256    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 a82:	80 91 bf 19 	lds	r24, 0x19BF	; 0x8019bf <USB_ControlRequest+0x2>
 a86:	90 91 c0 19 	lds	r25, 0x19C0	; 0x8019c0 <USB_ControlRequest+0x3>
 a8a:	8c 3d       	cpi	r24, 0xDC	; 220
 a8c:	53 e0       	ldi	r21, 0x03	; 3
 a8e:	95 07       	cpc	r25, r21
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a90:	71 f5       	brne	.+92     	; 0xaee <USB_Device_ProcessControlRequest+0x1fe>
 a92:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 a94:	8a 83       	std	Y+2, r24	; 0x02
 a96:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a98:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a9a:	4f b7       	in	r20, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 a9c:	f8 94       	cli
 a9e:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 aa0:	13 96       	adiw	r26, 0x03	; 3
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 aa2:	20 e0       	ldi	r18, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 aa4:	3e e0       	ldi	r19, 0x0E	; 14
 aa6:	51 e2       	ldi	r21, 0x21	; 33
 aa8:	e3 2f       	mov	r30, r19
 aaa:	f0 e0       	ldi	r31, 0x00	; 0
 aac:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>

					if (SerialCharNum & 0x01)
 ab0:	e4 91       	lpm	r30, Z
 ab2:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
 ab4:	03 c0       	rjmp	.+6      	; 0xabc <USB_Device_ProcessControlRequest+0x1cc>
 ab6:	e2 95       	swap	r30
						SigReadAddress++;
 ab8:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
 aba:	3f 5f       	subi	r19, 0xFF	; 255
 abc:	ef 70       	andi	r30, 0x0F	; 15
 abe:	8e 2f       	mov	r24, r30

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	ea 30       	cpi	r30, 0x0A	; 10
 ac4:	10 f0       	brcs	.+4      	; 0xaca <USB_Device_ProcessControlRequest+0x1da>
 ac6:	c7 96       	adiw	r24, 0x37	; 55
 ac8:	01 c0       	rjmp	.+2      	; 0xacc <USB_Device_ProcessControlRequest+0x1dc>
 aca:	c0 96       	adiw	r24, 0x30	; 48
 acc:	8d 93       	st	X+, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 ace:	9d 93       	st	X+, r25
 ad0:	2f 5f       	subi	r18, 0xFF	; 255
 ad2:	24 31       	cpi	r18, 0x14	; 20
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 ad4:	49 f7       	brne	.-46     	; 0xaa8 <USB_Device_ProcessControlRequest+0x1b8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ad6:	4f bf       	out	0x3f, r20	; 63
 ad8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 adc:	87 7f       	andi	r24, 0xF7	; 247
 ade:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 ae2:	6a e2       	ldi	r22, 0x2A	; 42
 ae4:	70 e0       	ldi	r23, 0x00	; 0
 ae6:	ce 01       	movw	r24, r28
 ae8:	01 96       	adiw	r24, 0x01	; 1
 aea:	d4 dc       	rcall	.-1624   	; 0x494 <Endpoint_Write_Control_Stream_LE>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 aec:	14 c0       	rjmp	.+40     	; 0xb16 <USB_Device_ProcessControlRequest+0x226>
 aee:	60 91 c1 19 	lds	r22, 0x19C1	; 0x8019c1 <USB_ControlRequest+0x4>
 af2:	70 91 c2 19 	lds	r23, 0x19C2	; 0x8019c2 <USB_ControlRequest+0x5>
 af6:	ae 01       	movw	r20, r28
 af8:	4f 5f       	subi	r20, 0xFF	; 255
 afa:	5f 4f       	sbci	r21, 0xFF	; 255
 afc:	f6 db       	rcall	.-2068   	; 0x2ea <CALLBACK_USB_GetDescriptor>
 afe:	bc 01       	movw	r22, r24
 b00:	89 2b       	or	r24, r25
 b02:	09 f4       	brne	.+2      	; 0xb06 <USB_Device_ProcessControlRequest+0x216>
 b04:	3e c0       	rjmp	.+124    	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 b06:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b0a:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b0c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b10:	89 81       	ldd	r24, Y+1	; 0x01
 b12:	9a 81       	ldd	r25, Y+2	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b14:	1b dd       	rcall	.-1482   	; 0x54c <Endpoint_Write_Control_PStream_LE>
 b16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b1a:	8b 77       	andi	r24, 0x7B	; 123
 b1c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b20:	30 c0       	rjmp	.+96     	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 b22:	80 38       	cpi	r24, 0x80	; 128
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b24:	71 f5       	brne	.+92     	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 b26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b2a:	87 7f       	andi	r24, 0xF7	; 247
 b2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b30:	80 91 b8 19 	lds	r24, 0x19B8	; 0x8019b8 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b34:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b3c:	8e 77       	andi	r24, 0x7E	; 126
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b3e:	77 cf       	rjmp	.-274    	; 0xa2e <USB_Device_ProcessControlRequest+0x13e>
 b40:	81 11       	cpse	r24, r1
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b42:	1f c0       	rjmp	.+62     	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 b44:	80 91 bf 19 	lds	r24, 0x19BF	; 0x8019bf <USB_ControlRequest+0x2>
 b48:	90 91 c0 19 	lds	r25, 0x19C0	; 0x8019c0 <USB_ControlRequest+0x3>
 b4c:	99 27       	eor	r25, r25
 b4e:	02 97       	sbiw	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b50:	c4 f4       	brge	.+48     	; 0xb82 <USB_Device_ProcessControlRequest+0x292>
 b52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b56:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b58:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b5c:	80 91 bf 19 	lds	r24, 0x19BF	; 0x8019bf <USB_ControlRequest+0x2>

	Endpoint_ClearStatusStage();
 b60:	80 93 b8 19 	sts	0x19B8, r24	; 0x8019b8 <USB_Device_ConfigurationNumber>

	if (USB_Device_ConfigurationNumber)
 b64:	87 dd       	rcall	.-1266   	; 0x674 <Endpoint_ClearStatusStage>
 b66:	80 91 b8 19 	lds	r24, 0x19B8	; 0x8019b8 <USB_Device_ConfigurationNumber>
 b6a:	81 11       	cpse	r24, r1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b6c:	06 c0       	rjmp	.+12     	; 0xb7a <USB_Device_ProcessControlRequest+0x28a>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b6e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 b72:	87 fd       	sbrc	r24, 7
 b74:	02 c0       	rjmp	.+4      	; 0xb7a <USB_Device_ProcessControlRequest+0x28a>
 b76:	81 e0       	ldi	r24, 0x01	; 1
 b78:	01 c0       	rjmp	.+2      	; 0xb7c <USB_Device_ProcessControlRequest+0x28c>

	EVENT_USB_Device_ConfigurationChanged();
 b7a:	84 e0       	ldi	r24, 0x04	; 4
 b7c:	80 93 bc 19 	sts	0x19BC, r24	; 0x8019bc <USB_DeviceState>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b80:	1c db       	rcall	.-2504   	; 0x1ba <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b86:	83 ff       	sbrs	r24, 3
 b88:	0a c0       	rjmp	.+20     	; 0xb9e <USB_Device_ProcessControlRequest+0x2ae>
 b8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b8e:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b90:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b94:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b98:	80 62       	ori	r24, 0x20	; 32
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 b9a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b9e:	aa 96       	adiw	r28, 0x2a	; 42
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	f8 94       	cli
 ba4:	de bf       	out	0x3e, r29	; 62
 ba6:	0f be       	out	0x3f, r0	; 63
 ba8:	cd bf       	out	0x3d, r28	; 61
 baa:	df 91       	pop	r29
 bac:	cf 91       	pop	r28
 bae:	1f 91       	pop	r17
 bb0:	08 95       	ret

00000bb2 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 bb2:	08 95       	ret

00000bb4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 bb4:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 bb6:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <USB_DeviceState>
 bba:	88 23       	and	r24, r24
 bbc:	99 f0       	breq	.+38     	; 0xbe4 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 bbe:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 bc2:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 bc4:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 bc8:	89 2f       	mov	r24, r25
 bca:	81 70       	andi	r24, 0x01	; 1
 bcc:	90 fd       	sbrc	r25, 0
 bce:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 bd0:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bd2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bd6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
 bda:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bdc:	89 de       	rcall	.-750    	; 0x8f0 <USB_Device_ProcessControlRequest>
 bde:	cf 70       	andi	r28, 0x0F	; 15
 be0:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 be4:	cf 91       	pop	r28
 be6:	08 95       	ret

00000be8 <__divmodhi4>:
 be8:	97 fb       	bst	r25, 7
 bea:	07 2e       	mov	r0, r23
 bec:	16 f4       	brtc	.+4      	; 0xbf2 <__divmodhi4+0xa>
 bee:	00 94       	com	r0
 bf0:	06 d0       	rcall	.+12     	; 0xbfe <__divmodhi4_neg1>
 bf2:	77 fd       	sbrc	r23, 7
 bf4:	08 d0       	rcall	.+16     	; 0xc06 <__divmodhi4_neg2>
 bf6:	0b d0       	rcall	.+22     	; 0xc0e <__udivmodhi4>
 bf8:	07 fc       	sbrc	r0, 7
 bfa:	05 d0       	rcall	.+10     	; 0xc06 <__divmodhi4_neg2>
 bfc:	3e f4       	brtc	.+14     	; 0xc0c <__divmodhi4_exit>

00000bfe <__divmodhi4_neg1>:
 bfe:	90 95       	com	r25
 c00:	81 95       	neg	r24
 c02:	9f 4f       	sbci	r25, 0xFF	; 255
 c04:	08 95       	ret

00000c06 <__divmodhi4_neg2>:
 c06:	70 95       	com	r23
 c08:	61 95       	neg	r22
 c0a:	7f 4f       	sbci	r23, 0xFF	; 255

00000c0c <__divmodhi4_exit>:
 c0c:	08 95       	ret

00000c0e <__udivmodhi4>:
 c0e:	aa 1b       	sub	r26, r26
 c10:	bb 1b       	sub	r27, r27
 c12:	51 e1       	ldi	r21, 0x11	; 17
 c14:	07 c0       	rjmp	.+14     	; 0xc24 <__udivmodhi4_ep>

00000c16 <__udivmodhi4_loop>:
 c16:	aa 1f       	adc	r26, r26
 c18:	bb 1f       	adc	r27, r27
 c1a:	a6 17       	cp	r26, r22
 c1c:	b7 07       	cpc	r27, r23
 c1e:	10 f0       	brcs	.+4      	; 0xc24 <__udivmodhi4_ep>
 c20:	a6 1b       	sub	r26, r22
 c22:	b7 0b       	sbc	r27, r23

00000c24 <__udivmodhi4_ep>:
 c24:	88 1f       	adc	r24, r24
 c26:	99 1f       	adc	r25, r25
 c28:	5a 95       	dec	r21
 c2a:	a9 f7       	brne	.-22     	; 0xc16 <__udivmodhi4_loop>
 c2c:	80 95       	com	r24
 c2e:	90 95       	com	r25
 c30:	bc 01       	movw	r22, r24
 c32:	cd 01       	movw	r24, r26
 c34:	08 95       	ret

00000c36 <_exit>:
 c36:	f8 94       	cli

00000c38 <__stop_program>:
 c38:	ff cf       	rjmp	.-2      	; 0xc38 <__stop_program>
